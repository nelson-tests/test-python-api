name: 'Deploy Project'


on:
  workflow_dispatch: # To can dispatch manually

  release:
    types: [created]
    tags: ["v*.*.*"]
    branches:
    - main


env:
  BASE_IMAGE_NAME: 'test-python-api'


jobs:
  build:
    name: 'Building Docker Image'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Get tag'
      id: tag
      uses: dawidd6/action-get-tag@v1

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: Build Docker
      run: |
        docker build -f Dockerfile . -t ${{ env.BASE_IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

    - name: 'Show Docker Image'
      run: |
        docker image ls

    - name: 'Save Docker Image'
      run: |
        docker save -o ${{ env.BASE_IMAGE_NAME }}.tar ${{ env.BASE_IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BASE_IMAGE_NAME }}
        path: ${{ env.BASE_IMAGE_NAME }}.tar
        retention-days: 1



  dev-release:
    name: 'Publish Docker Image to GitHub Container Registry'
    runs-on: ubuntu-latest
    environment: DEV
    needs: build
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      packages: write

    steps:

    - name: 'Download artifact'
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.BASE_IMAGE_NAME }}

    - name: 'Get tag'
      id: tag
      uses: dawidd6/action-get-tag@v1

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: 'Log in to Docker Hub'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Load & Push Docker Image
      run: |
        docker load -i ${{ env.BASE_IMAGE_NAME }}.tar

    - name: 'Add Docker Image Tag for specific version'
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

    - name: 'Add Docker Image Tag for latest version'
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:latest

    - name: 'Push Docker Image to GitHub Container Registry'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest



  prod-release:
    name: 'Publish Docker Image to Docker Hub'
    runs-on: ubuntu-latest
    environment: PROD
    needs: dev-release
    env:
      IMAGE_NAME: 'test-python-api'

    steps:

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.BASE_IMAGE_NAME }}

    - name: 'Get tag'
      id: tag
      uses: dawidd6/action-get-tag@v1

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: 'Log in to Docker Hub'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Load & Push Docker Image
      run: |
        docker load -i ${{ env.BASE_IMAGE_NAME }}.tar

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          ${{ steps.tag.outputs.tag }}
          latest

    - name: 'Show metadata'
      run: |
        echo "Show metadata"
        echo "Tags: ${{ steps.meta.outputs.tags }}"

    - name: 'Build and push Docker image'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        